{"version":3,"sources":["components/AddCategory.jsx","components/GifGrid.jsx","GifExpertApp.jsx","reportWebVitals.js","index.jsx"],"names":["AddCategory","setCategories","React","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGrid","category","images","setImages","getGifs","a","url","fetch","resp","json","data","gifs","map","img","id","title","downsized_medium","useEffect","GitExpertApp","categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","GifExpertApp","document","getElementById"],"mappings":"oMA2BeA,EAxBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,IAAMC,SAAS,IADZ,mBAChCC,EADgC,KACpBC,EADoB,KAavC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BT,GAAc,SAACU,GAAD,4BAAaA,GAAb,CAAkBP,OAChCC,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZpB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,uBCkC7CG,EApCC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACFf,IAAMC,SAAS,IADb,mBACvBe,EADuB,KACfC,EADe,KAGxBC,EAAO,uCAAG,oCAAAC,EAAA,6DAENC,EAFM,iFAE0E,oCAF1E,SAGOC,MAAMD,GAHb,cAGNE,EAHM,gBAIWA,EAAKC,OAJhB,gBAIJC,EAJI,EAIJA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIX,cAAN,aAAE,EAAYc,iBAAiBV,QAEtCH,EAAUQ,GAVE,4CAAH,qDAiBb,OAJAzB,IAAM+B,WAAU,WACZb,MACD,IAGC,gCACI,6BAAKH,IACL,6BACKC,EAAOU,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACR,mCAAeA,IAAND,YCFdI,EAvBM,WAAO,IAAD,EACahC,IAAMC,SAAS,CAAC,gBAD7B,mBAChBgC,EADgB,KACJlC,EADI,KAQvB,OACI,qCACI,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACKkC,EAAWP,KAAI,SAACX,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCRnBmB,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCApBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAD,MAEJC,SAASC,eAAe,SAM5Bd,M","file":"static/js/main.2d8aedd6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = React.useState('');\n\n    const handleInputChange = (e) => setInputValue(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories((cat) => [...cat, inputValue]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type='text' value={inputValue} onChange={handleInputChange} />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { API_KEY_GIF } from '../config';\n\nconst GifGrid = ({ category }) => {\n    const [images, setImages] = React.useState([]);\n\n    const getGifs = async () => {\n        // const url = `https://api.giphy.com/v1/gifs/search?q=Rick+and+Morty&limit=10&api_key=${API_KEY_GIF}`;\n        const url = `https://api.giphy.com/v1/gifs/search?q=Rick+and+Morty&limit=10&api_key=${'dN9rK9tDmzRxBVhGaNuMiAsa2yN2fN7i'}`;\n        const resp = await fetch(url);\n        const { data } = await resp.json();\n        const gifs = data.map((img) => ({\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }));\n        setImages(gifs);\n    };\n\n    React.useEffect(() => {\n        getGifs();\n    }, []);\n\n    return (\n        <div>\n            <h3>{category}</h3>\n            <ol>\n                {images.map(({ id, title }) => (\n                    <li key={id}> {title}</li>\n                ))}\n            </ol>\n        </div>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GitExpertApp = () => {\n    const [categories, setCategories] = React.useState(['Dragon Ball']);\n\n    //   const handleAdd = () => {\n    //     setCategories([\"Bleach\", ...categories]);\n    //     // setCategories( cats => [...cats, \"Bleach\"]);\n    //   };\n\n    return (\n        <>\n            <h2>Hola nuevo</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {categories.map((category) => (\n                    <GifGrid key={category} category={category} />\n                ))}\n            </ol>\n        </>\n    );\n};\n\nexport default GitExpertApp;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <GifExpertApp />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}