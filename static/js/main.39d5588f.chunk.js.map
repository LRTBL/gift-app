{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridIitem.jsx","components/GifGrid.jsx","GifExpertApp.jsx","reportWebVitals.js","index.jsx","config/index.js"],"names":["AddCategory","setCategories","React","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","API_KEY_GIF","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridIitem","className","src","alt","GifGrid","GitExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","GifExpertApp","document","getElementById","module","exports","process"],"mappings":"qMA2BeA,EAxBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,IAAMC,SAAS,IADZ,mBAChCC,EADgC,KACpBC,EADoB,KAavC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BT,GAAc,SAACU,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZpB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,8BCQ7CG,EAZF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,6BACkFI,eADlF,SAEOC,MAAMH,GAFb,cAENI,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAG,UAAES,EAAIG,cAAN,aAAE,EAAYC,iBAAiBb,QAP1B,kBASLO,GATK,4CAAH,sDCgBEO,EAfM,SAAChB,GAAc,IAAD,EACLd,mBAAS,CAC/BsB,KAAM,GACNS,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAY/B,OANAC,qBAAU,WACNrB,EAAQC,GAAUqB,MAAK,SAACZ,GACpBU,EAAS,CAAEX,KAAMC,EAAMQ,SAAS,SAErC,IAEIC,GCMII,EAlBM,SAAC,GAAa,IAAXX,EAAU,EAAVA,IACZT,EAAeS,EAAfT,IAAKW,EAAUF,EAAVE,MACb,OACI,sBAAKU,UAAU,yCAAf,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKZ,IACpB,4BAAIA,QCiBDa,EApBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACIgB,EAAahB,GAAjCc,EADgB,EACtBN,KAAcS,EADQ,EACRA,QAEtB,OACI,qCACKA,GAAW,mBAAGM,UAAU,mCAAb,0BACZ,oBAAIA,UAAU,oCAAd,SAAmDvB,IACnD,qBAAKuB,UAAU,YAAf,SACKT,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAA2BA,IAAKA,GAAbA,EAAIC,aCa5Be,EAvBM,WAAO,IAAD,EACa1C,IAAMC,SAAS,CAAC,gBAD7B,mBAChB0C,EADgB,KACJ5C,EADI,KAQvB,OACI,qCACI,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK4C,EAAWlB,KAAI,SAACV,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCRnB6B,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCApBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K,gBCjBAc,EAAOC,QAAU,CACbxC,YAAayC,sC","file":"static/js/main.39d5588f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = React.useState('');\n\n    const handleInputChange = (e) => setInputValue(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories((cat) => [inputValue, ...cat]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type='text' value={inputValue} onChange={handleInputChange} />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import { API_KEY_GIF } from '../config';\n\nconst getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${API_KEY_GIF}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((img) => ({\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n    }));\n    return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category).then((gifs) => {\n            setState({ data: gifs, loading: false });\n        });\n    }, []);\n\n    return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridIitem = ({ img }) => {\n    const { url, title } = img;\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};\n\nGifGridIitem.propTypes = {\n    // eslint-disable-next-line react/require-default-props\n    img: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n        title: PropTypes.string,\n    }),\n};\n\nexport default GifGridIitem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridIitem from './GifGridIitem';\n\nconst GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            {loading && <p className='animate__animated animate__flash'>Cargando ...</p>}\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n            <div className='card-grid'>\n                {images.map((img) => (\n                    <GifGridIitem key={img.id} img={img} />\n                ))}\n            </div>\n        </>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GitExpertApp = () => {\n    const [categories, setCategories] = React.useState(['Dragon Ball']);\n\n    //   const handleAdd = () => {\n    //     setCategories([\"Bleach\", ...categories]);\n    //     // setCategories( cats => [...cats, \"Bleach\"]);\n    //   };\n\n    return (\n        <>\n            <h2>Hola nuevo</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {categories.map((category) => (\n                    <GifGrid key={category} category={category} />\n                ))}\n            </ol>\n        </>\n    );\n};\n\nexport default GitExpertApp;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <GifExpertApp />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n    API_KEY_GIF: process.env.REACT_APP_API_KEY,\n};\n"],"sourceRoot":""}